{"version":3,"file":"server-bundle.js","mappings":"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","sources":["webpack://oce-react-blog-sample/webpack/bootstrap","webpack://oce-react-blog-sample/webpack/runtime/compat get default export","webpack://oce-react-blog-sample/webpack/runtime/define property getters","webpack://oce-react-blog-sample/webpack/runtime/hasOwnProperty shorthand","webpack://oce-react-blog-sample/external commonjs \"core-js\"","webpack://oce-react-blog-sample/external commonjs \"regenerator-runtime/runtime\"","webpack://oce-react-blog-sample/external commonjs \"express\"","webpack://oce-react-blog-sample/external commonjs \"react-router-dom\"","webpack://oce-react-blog-sample/external node-commonjs \"http\"","webpack://oce-react-blog-sample/external node-commonjs \"https\"","webpack://oce-react-blog-sample/external commonjs \"react\"","webpack://oce-react-blog-sample/external commonjs \"prop-types\"","webpack://oce-react-blog-sample/external commonjs \"react-helmet\"","webpack://oce-react-blog-sample/external commonjs \"@oracle/content-management-sdk\"","webpack://oce-react-blog-sample/./src/scripts/server-config-utils.js","webpack://oce-react-blog-sample/./src/scripts/utils.js","webpack://oce-react-blog-sample/./src/scripts/services.js","webpack://oce-react-blog-sample/./src/components/Header.jsx","webpack://oce-react-blog-sample/./src/components/TopicsListItem.jsx","webpack://oce-react-blog-sample/./src/pages/TopicsListPage.jsx","webpack://oce-react-blog-sample/./src/components/ArticlesListItem.jsx","webpack://oce-react-blog-sample/./src/components/Breadcrumb.jsx","webpack://oce-react-blog-sample/./src/components/Breadcrumbs.jsx","webpack://oce-react-blog-sample/./src/pages/ArticlesListPage.jsx","webpack://oce-react-blog-sample/external commonjs \"xss\"","webpack://oce-react-blog-sample/./src/pages/ArticleDetailsPage.jsx","webpack://oce-react-blog-sample/./src/components/ProductsListItem.jsx","webpack://oce-react-blog-sample/./src/pages/ProductsListPage.jsx","webpack://oce-react-blog-sample/./src/pages/ProductDetailsPage.jsx","webpack://oce-react-blog-sample/./src/components/VideosListItem.jsx","webpack://oce-react-blog-sample/./src/pages/VideosListPage.jsx","webpack://oce-react-blog-sample/./src/pages/NotFoundPage.jsx","webpack://oce-react-blog-sample/./src/pages/Routes.js","webpack://oce-react-blog-sample/external commonjs \"react-dom/server\"","webpack://oce-react-blog-sample/external commonjs \"react-router-config\"","webpack://oce-react-blog-sample/external commonjs \"serialize-javascript\"","webpack://oce-react-blog-sample/./src/server/server.js","webpack://oce-react-blog-sample/./src/server/renderer.jsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"core-js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"regenerator-runtime/runtime\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"express\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-router-dom\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"http\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"https\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"prop-types\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-helmet\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@oracle/content-management-sdk\");","/* eslint-disable no-param-reassign */\r\n/* eslint-disable camelcase */\r\n/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\n\r\nimport { createDeliveryClient, createPreviewClient } from '@oracle/content-management-sdk';\r\n\r\n/**\r\n * This file contains methods to create an Oracle Content SDK client to make calls to Oracle\r\n * Content. A \"delivery client\" is used to view content which has been published to a public\r\n * channel or published to a secure channel.  The \"preview client\" is used to view content\r\n * which has been assigned to a channel but has not yet been published.\r\n *\r\n * The minimal information which needs to be specified is the server URL, the rest API version\r\n * to use and the channel token for the channel which contains the data to display in the app.\r\n *\r\n * When previewing content or using content in a secure channel, authentication is required.\r\n *\r\n * The AUTH environment variable is used to specify the Authentication header value\r\n * (including \"Basic\"/\"Bearer\") when the value does not change, corresponding to the tokenString\r\n * in the constructor.\r\n *\r\n * The AUTH_PARAMS environment variable is used to specify the Authentication object values\r\n * to get a new access token on expiry of the old one, corresponding to the OAUTHValues\r\n * in the constructor.\r\n */\r\n\r\nlet clientInstance = null;\r\n\r\n/**\r\n * Returns a Delivery Client or a Preview Client to be used to access\r\n * content from Oracle Content Management server.\r\n */\r\nexport default function getClient() {\r\n  // When creating a client for the browser and authorization is needed for calls to\r\n  // Oracle Content\r\n  // - all requests (content and images) are to be proxied through this application's\r\n  //   Express server\r\n  // - the ServerURL for the Oracle Content SDK client will be this application's host\r\n  //\r\n  // See the following files where proxying is setup/done\r\n  // - 'src/scripts/utils.getImageUrl' for the code proxying requests for image binaries\r\n  // - 'src/server/server' for the Express server proxying.\r\n  if (clientInstance === null) {\r\n    const serverURL = ((process.env.AUTH || process.env.AUTH_PARAMS) && process.env.IS_BROWSER)\r\n      ? `${window.location.origin}/`\r\n      : process.env.SERVER_URL;\r\n\r\n    let authParams = null;\r\n    if (process.env.AUTH_PARAMS) {\r\n      authParams = {};\r\n      const oauthParamsParsed = JSON.parse(process.env.AUTH_PARAMS);\r\n      authParams.clientId = oauthParamsParsed.CLIENT_ID;\r\n      authParams.clientSecret = oauthParamsParsed.CLIENT_SECRET;\r\n      authParams.clientScopeUrl = oauthParamsParsed.CLIENT_SCOPE_URL;\r\n      authParams.idpUrl = oauthParamsParsed.IDP_URL;\r\n    }\r\n\r\n    const serverconfig = {\r\n      contentServer: serverURL,\r\n      contentVersion: process.env.API_VERSION,\r\n      channelToken: process.env.CHANNEL_TOKEN,\r\n      options: process.env.OPTIONS ? JSON.parse(process.env.OPTIONS) : null,\r\n      authorization: process.env.AUTH,\r\n      authorizationParams: authParams,\r\n    };\r\n\r\n    // Add the following if you want logging from the Oracle Content SDK shown in the console\r\n    // serverconfig.logger = console;\r\n\r\n    // create and return the relevant client\r\n    if (process.env.PREVIEW === 'true') {\r\n      clientInstance = createPreviewClient(serverconfig);\r\n    } else {\r\n      clientInstance = createDeliveryClient(serverconfig);\r\n    }\r\n  }\r\n  return clientInstance;\r\n}\r\n","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\n\r\n/**\r\n * Function to take a date and return it as a formatted string.\r\n *\r\n * @param {Date} date the date to format into a nice string\r\n */\r\nexport function dateToMDY(date) {\r\n  const dateObj = new Date(date);\r\n  const options = {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  };\r\n  const formattedDate = dateObj.toLocaleDateString('en-US', options);\r\n  return formattedDate;\r\n}\r\n\r\n/**\r\n * When authorization is needed for images, change the image URL so that it\r\n * goes to this application's Express server in order for the authorization\r\n * headers are added to the request.\r\n *\r\n * See the following files where proxying is setup/done\r\n * - 'src/scripts/server-config-utils.getClient' for the code proxying requests for content\r\n * - 'src/server/server' for the Express server proxying.\r\n *\r\n * @param String originalUrl the image's original url\r\n */\r\nexport function getImageUrl(originalUrl) {\r\n  if (process.env.AUTH || process.env.AUTH_PARAMS) {\r\n    // strip off the server URL from the front of the URL to make a relative URL\r\n    // causing the request to go to this application's Express server\r\n    const url = new URL(originalUrl);\r\n    return url.pathname + url.search;\r\n  }\r\n  return originalUrl;\r\n}\r\n","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\n/* eslint-disable no-param-reassign */\r\n\r\n/**\r\n * This file contains a number of utility methods used to obtain data\r\n * from the server using the Oracle Content SDK JavaScript Library.\r\n */\r\n\r\n import getClient from './server-config-utils';\r\n import { getImageUrl } from './utils';\r\n \r\n /**\r\n  * Utility method to log an error.\r\n  */\r\n function logError(message, error) {\r\n   if (error && error.statusMessage) {\r\n     console.log(`${message} : `, error.statusMessage);\r\n   } else if (error.error && error.error.code && error.error.code === 'ETIMEDOUT') {\r\n     console.log(`${message} : `, error);\r\n   } else if (error.error && error.error.code) {\r\n     console.log(`${message} : `, error.error.code);\r\n   } else if (error) {\r\n     console.error(message, error);\r\n   }\r\n }\r\n \r\n /**\r\n  * Flattens an array of arrays into a single array.\r\n  *\r\n  * Note:  ES6's array.flat() is not supported in Node pre version 11 so flatten manually.\r\n  *\r\n  * @param {Array} inArray - the array of arrays to flatten\r\n  * @param {Array} result - the flattened array\r\n  */\r\n function flattenArray(inArray, result = []) {\r\n   for (let i = 0, { length } = inArray; i < length; i += 1) {\r\n     const arrayElement = inArray[i];\r\n     if (Array.isArray(arrayElement)) {\r\n       flattenArray(arrayElement, result);\r\n     } else {\r\n       result.push(arrayElement);\r\n     }\r\n   }\r\n   return result;\r\n }\r\n \r\n /**\r\n  * Private method for adding the specified format rendition to the rendition string\r\n  *\r\n  * @param {Object} url - the url which contains the rendition strings\r\n  * @param {Object} rendition - the rendition field of the content sdk json object\r\n  * @param {String} formatstr - the format string type - either webp or jpg\r\n  */\r\n function addRendition(urls, rendition, formatstr) {\r\n   // Get the webp format field\r\n   const format = rendition.formats.filter((item) => item.format === `${formatstr}`)[0];\r\n   const self = format.links.filter((item) => item.rel === 'self')[0];\r\n   const url = getImageUrl(self.href);\r\n   const { width } = format.metadata;\r\n \r\n   // Also save the jpg format so that it can be used as a default value for images\r\n   if (formatstr === 'jpg') {\r\n     urls[rendition.name.toLowerCase()] = url;\r\n     urls.jpgSrcset += `${url} ${width}w,`;\r\n   } else {\r\n     urls.srcset += `${url} ${width}w,`;\r\n   }\r\n }\r\n \r\n /**\r\n  * Retrieve the sourceset for an asset that is constructed from the rendition\r\n  *\r\n  * @param {asset} client - the asset whose fields contain the various renditions\r\n  * @returns {Object} - An Object containing the the sourceset as well as individual rendition\r\n  * url that can be used as default src\r\n  */\r\n function getSourceSet(asset) {\r\n   const urls = {};\r\n   urls.srcset = '';\r\n   urls.jpgSrcset = '';\r\n   if (asset.fields && asset.fields.renditions) {\r\n     asset.fields.renditions.forEach((rendition) => {\r\n       addRendition(urls, rendition, 'jpg');\r\n       addRendition(urls, rendition, 'webp');\r\n     });\r\n   }\r\n   // add the native rendition to the srcset as well\r\n   urls.srcset += `${asset.fields.native.links[0].href} ${asset.fields.metadata.width}w`;\r\n   urls.native = asset.fields.native.links[0].href;\r\n   urls.width = asset.fields.metadata.width;\r\n   urls.height = asset.fields.metadata.height;\r\n   return urls;\r\n }\r\n \r\n /**\r\n  * Return the rendition URLs for the specified item.\r\n  *\r\n  * @param {DeliveryClient} client - the delivery client to get data from Oracle content\r\n  * @param {string} identifier - the item id whose medium rendition URL is to be obtained\r\n  * @returns {Promise({Object})} - A Promise containing the data\r\n  */\r\n function getRenditionURLs(client, identifier) {\r\n   return client.getItem({\r\n     id: identifier,\r\n     expand: 'fields.renditions',\r\n   }).then((asset) => getSourceSet(asset))\r\n     .catch((error) => logError('Fetching Rendition URLs failed', error));\r\n }\r\n \r\n /* ----------------------------------------------------\r\n  * APIs to get the data for the Topics List Page\r\n  * ---------------------------------------------------- */\r\n \r\n /**\r\n  * Fetch details about the specific topic.\r\n  *\r\n  * @param {DeliveryClient} client - the delivery client to get data from Oracle content\r\n  * @param {string} topicId - the id of the topic whose details are to be obtained\r\n  * @returns {Promise({Object})} - A Promise containing the data\r\n  */\r\n function fetchTopic(client, topicId) {\r\n   return client.getItem({\r\n     id: topicId,\r\n     expand: 'fields.thumbnail',\r\n   }).then((topic) => {\r\n     topic.renditionUrls = getSourceSet(topic.fields.thumbnail);\r\n     return topic;\r\n   }).catch((error) => logError('Fetching topic failed', error));\r\n }\r\n \r\n /**\r\n  * Fetches most of the data for the topics list page.\r\n  *\r\n  * The data returned contains\r\n  *    the company title,\r\n  *    the about Url,\r\n  *    the contact Url,\r\n  *    the list of topics\r\n  *\r\n  * The only data not returned is the company logo URL, this needs to be obtained\r\n  * using getRenditionURL specifying the logoId.\r\n  *\r\n  * @param {DeliveryClient} client - the delivery client to get data from Oracle content\r\n  * @returns {Promise({Object})} - A Promise containing the data\r\n  */\r\n function fetchHomePage(client) {\r\n   return client.queryItems({\r\n     q: '(type eq \"OCEGettingStartedHomePage\" AND name eq \"Home Page\")',\r\n   }).then((data) => {\r\n     const logoID = data.items[0].fields.company_logo.id;\r\n     const title = data.items[0].fields.company_name;\r\n     const aboutUrl = data.items[0].fields.about_url;\r\n     const contactUrl = data.items[0].fields.contact_url;\r\n \r\n     const { topics } = data.items[0].fields;\r\n     const promises = [];\r\n \r\n     topics.forEach((origTopic) => {\r\n       // add a promise to the total list of promises to get the full topic details\r\n       promises.push(\r\n         fetchTopic(client, origTopic.id)\r\n           .then((topic) => topic),\r\n       );\r\n     });\r\n \r\n     // execute all the promises returning a single dimension array of all\r\n     // of the topics and the other home page data\r\n     return Promise.all(promises)\r\n       .then((allTopics) => (\r\n         {\r\n           logoID,\r\n           companyTitle: title,\r\n           aboutUrl,\r\n           contactUrl,\r\n           topics: flattenArray(allTopics),\r\n         }\r\n       )).catch((error) => logError('Fetching topics failed', error));\r\n   }).catch((error) => logError('Fetching home page data failed', error));\r\n }\r\n \r\n /**\r\n  * Fetches all the data required for the topics list page.\r\n  *\r\n  * The data returned contains\r\n  *    the company title,\r\n  *    the company logo Url,\r\n  *    the about Url,\r\n  *    the contact Url,\r\n  *    the list of topics\r\n  *\r\n  * @returns {Promise({object})} - A Promise containing the data\r\n  */\r\n export function getTopicsListPageData() {\r\n   const client = getClient();\r\n \r\n   return fetchHomePage(client)\r\n     .then((data) => (\r\n       getRenditionURLs(client, data.logoID)\r\n         .then((renditionUrls) => {\r\n           data.companyThumbnailRenditionUrls = renditionUrls;\r\n           return data;\r\n         })\r\n     ));\r\n }\r\n \r\n /* ----------------------------------------------------\r\n  * APIs to get the data for the Articles List Page\r\n  * ---------------------------------------------------- */\r\n \r\n /**\r\n  * Gets all the data required to render the articles list page.\r\n  *\r\n  * Get all the articles for the specified topic with its rendition URL populated.\r\n  *\r\n  * The data returned contains\r\n  *   the topic id,\r\n  *   the topic name,\r\n  *   the list of articles\r\n  *\r\n  * @param {string} topicId - the id of the topic\r\n  * @returns {Promise({object})} - A Promise containing the data\r\n  */\r\n export function fetchTopicArticles(topicId) {\r\n   const client = getClient();\r\n   return client.queryItems({\r\n     q: `(type eq \"OCEGettingStartedArticle\" AND fields.topic eq \"${topicId}\")`,\r\n     orderBy: 'fields.published_date:desc',\r\n   }).then((data) => {\r\n     const promises = [];\r\n     const articles = data.items;\r\n \r\n     articles.forEach((article) => {\r\n       // add a promise to the total list of promises to get the article url\r\n       promises.push(\r\n         getRenditionURLs(client, article.fields.image.id)\r\n           .then((renditionUrls) => {\r\n             article.renditionUrls = renditionUrls;\r\n             // Note: the spread operator is used here so that we return a top level\r\n             // object, rather than a value which contains the object\r\n             // i.e we return\r\n             //   {\r\n             //     field1: 'value', field2 : \"value\", etc\r\n             //   },\r\n             // rather than\r\n             //   {\r\n             //     name: {\r\n             //             field1: 'value', field2 : \"value\", etc\r\n             //           }\r\n             //    }\r\n             return {\r\n               ...article,\r\n             };\r\n           }),\r\n       );\r\n     });\r\n \r\n     // execute all the promises and return all the data\r\n     return Promise.all(promises)\r\n       .then((allArticles) => ({\r\n         topicId,\r\n         articles: flattenArray(allArticles),\r\n       }));\r\n   }).catch((error) => logError('Fetching topic articles failed', error));\r\n }\r\n \r\n /* ----------------------------------------------------\r\n  * APIs to get the data for the Articles Details Page\r\n  * ---------------------------------------------------- */\r\n \r\n /**\r\n  * Get all the data required for rendering the article details page.\r\n  *\r\n  * Gets the details of the specified article with the image URL and author avatar URL\r\n  * obtained.\r\n  *\r\n  * The data returned contains\r\n  *   the article id,\r\n  *   the article name,\r\n  *   the name of the author,\r\n  *   the url of the avatar image for the author,\r\n  *   the article image URL,\r\n  *   the caption for the article image,\r\n  *   the article content,\r\n  *   the date the article was posted\r\n  *\r\n  * @param {string} articleId - The id of the article\r\n  * @returns {Promise({object})} - A Promise containing the data\r\n  */\r\n export function fetchArticleDetails(articleId) {\r\n   const client = getClient();\r\n   return client.getItem({\r\n     id: articleId,\r\n     expand: 'fields.author,fields.image',\r\n   }).then((article) => {\r\n     const title = article.fields.author.name;\r\n     const date = article.fields.published_date;\r\n     const content = article.fields.article_content;\r\n     const imageCaption = article.fields.image_caption;\r\n     const { name } = article;\r\n     const renditionUrls = getSourceSet(article.fields.image);\r\n     const avatarID = article.fields.author.fields.avatar.id;\r\n     // Get the author's avatar image\r\n     return getRenditionURLs(client, avatarID)\r\n       .then((authorRenditionUrls) => (\r\n         // return an object with just the data needed\r\n         {\r\n           id: articleId,\r\n           name,\r\n           title,\r\n           date,\r\n           content,\r\n           imageCaption,\r\n           renditionUrls,\r\n           authorRenditionUrls,\r\n         }\r\n       ));\r\n   }).catch((error) => logError('Fetching article details failed', error));\r\n }\r\n  /* ----------------------------------------------------\r\n   * APIs to get the data for the Products List Page\r\n   * ---------------------------------------------------- */\r\n  \r\n  /**\r\n   * Gets all the data required to render the products list page.\r\n   *\r\n   * Get all the products for the specified topic with its rendition URL populated.\r\n   *\r\n   * The data returned contains\r\n   *   the topic id,\r\n   *   the topic name,\r\n   *   the list of products\r\n   *\r\n   * @param {string} topicId - the id of the topic\r\n   * @returns {Promise({object})} - A Promise containing the data\r\n   */\r\n   export function fetchTopicProducts(topicId) {\r\n    const client = getClient();\r\n    return client.queryItems({\r\n      q: `(type eq \"Product\" AND fields.topic eq \"${topicId}\")`,\r\n    }).then((data) => {\r\n      const promises = [];\r\n      const products = data.items;\r\n  \r\n      products.forEach((product) => {\r\n        // add a promise to the total list of promises to get the product url\r\n        promises.push(\r\n          getRenditionURLs(client, product.fields.productImage.id)\r\n            .then((renditionUrls) => {\r\n              product.renditionUrls = renditionUrls;\r\n              // Note: the spread operator is used here so that we return a top level\r\n              // object, rather than a value which contains the object\r\n              // i.e we return\r\n              //   {\r\n              //     field1: 'value', field2 : \"value\", etc\r\n              //   },\r\n              // rather than\r\n              //   {\r\n              //     name: {\r\n              //             field1: 'value', field2 : \"value\", etc\r\n              //           }\r\n              //    }\r\n              return {\r\n                ...product,\r\n              };\r\n            }),\r\n        );\r\n      });\r\n  \r\n      // execute all the promises and return all the data\r\n      return Promise.all(promises)\r\n        .then((allProducts) => ({\r\n          topicId,\r\n          products: flattenArray(allProducts),\r\n        }));\r\n    }).catch((error) => logError('Fetching topic products failed', error));\r\n  }\r\n  \r\n  /* ----------------------------------------------------\r\n   * APIs to get the data for the Products Details Page\r\n   * ---------------------------------------------------- */\r\n  \r\n  /**\r\n   * Get all the data required for rendering the product details page.\r\n   *\r\n   * Gets the details of the specified product with the image URL and producer avatar URL\r\n   * obtained.\r\n   *\r\n   * The data returned contains\r\n   *   the product id,\r\n   *   the product name,\r\n   *   the name of the producer,\r\n   *   the url of the avatar image for the producer,\r\n   *   the product image URL,\r\n   *   the product productDetails (Formatted text)\r\n   *   the product productColor,\r\n   *   the product productStorage\r\n   *\r\n   * @param {string} productId - The id of the product\r\n   * @returns {Promise({object})} - A Promise containing the data\r\n   */\r\n   export function fetchProductDetails(productId) {\r\n    const client = getClient();\r\n    return client.getItem({\r\n      id: productId,\r\n      expand: 'fields.producer,fields.productImage',\r\n    }).then((product) => {\r\n      const avatarID = product.fields.producer.fields.avatar.id;\r\n      const description = product.description;\r\n      const title = product.fields.producer.name;\r\n      const content = product.fields.productDetails;\r\n      const productColor = product.fields.productColor;\r\n      const productStorage = product.fields.productStorage;\r\n      const { name } = product;\r\n      const renditionUrls = getSourceSet(product.fields.productImage);\r\n      \r\n      // Get the producer's avatar image\r\n      return getRenditionURLs(client, avatarID)\r\n        .then((producerRenditionUrls) => (\r\n          // return an object with just the data needed\r\n          {\r\n            id: productId,\r\n            name,\r\n            description,\r\n            title,\r\n            content,\r\n            productColor,\r\n            productStorage,\r\n            renditionUrls,\r\n            producerRenditionUrls,\r\n          }\r\n        ));\r\n    }).catch((error) => logError('Fetching product details failed', error));\r\n  }\r\n\r\n    /* ----------------------------------------------------\r\n   * APIs to get the data for the Products List Page\r\n   * ---------------------------------------------------- */\r\n  \r\n  /**\r\n   * Gets all the data required to render the products list page.\r\n   *\r\n   * Get all the products for the specified topic with its rendition URL populated.\r\n   *\r\n   * The data returned contains\r\n   *   the topic id,\r\n   *   the topic name,\r\n   *   the list of products\r\n   *\r\n   * @param {string} topicId - the id of the topic\r\n   * @returns {Promise({object})} - A Promise containing the data\r\n   */\r\n   export function fetchTopicVideos(topicId) {\r\n    const client = getClient();\r\n    return client.queryItems({\r\n      q: `(type eq \"YoutubeVideos\" AND fields.topic eq \"${topicId}\")`,\r\n    }).then((data) => {\r\n      const promises = [];\r\n      const products = data.items;\r\n  \r\n      products.forEach((product) => {\r\n        // add a promise to the total list of promises to get the product url\r\n        promises.push(product);\r\n      });\r\n  \r\n      // execute all the promises and return all the data\r\n      return Promise.all(promises)\r\n        .then((allVideos) => ({\r\n          topicId,\r\n          videos: flattenArray(allVideos),\r\n        }));\r\n    }).catch((error) => logError('Fetching topic videos failed', error));\r\n  }\r\n\r\n    ","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * React component for rendering the header of the home page\r\n *\r\n * @param {string} companyTitle The company's title\r\n * @param {string} companyThumbnailRenditionUrls The URL of the company's icon\r\n * @param {string} aboutUrl The URL for the About link\r\n * @param {string} contactUrl The URL for the Contact Us link\r\n */\r\nconst Header = (props) => {\r\n  const {\r\n    companyTitle, companyThumbnailRenditionUrls, aboutUrl, contactUrl,\r\n  } = props;\r\n\r\n  return (\r\n    <div className=\"logo\" data-testid=\"Header\">\r\n      {companyThumbnailRenditionUrls && (\r\n        <picture id=\"company-thumbnail\">\r\n          <source\r\n            type=\"image/webp\"\r\n            srcSet={companyThumbnailRenditionUrls.srcset}\r\n            sizes=\"(max-width: 480px) 60vw, 25vw\"\r\n          />\r\n          <img src={companyThumbnailRenditionUrls.native} alt=\"Company icon\" width={companyThumbnailRenditionUrls.width * 0.85} height={companyThumbnailRenditionUrls.height * 0.85} />\r\n        </picture>\r\n      )}\r\n      <h1 id=\"company-title\">{companyTitle}</h1>\r\n      <ul>\r\n        <li><a id=\"about\" href={aboutUrl}>About Us</a></li>\r\n        <li><a id=\"contact\" href={contactUrl}>Contact Us</a></li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n\r\n/*\r\n * Define the type of data used in this component.\r\n */\r\nHeader.propTypes = {\r\n  companyTitle: PropTypes.string.isRequired,\r\n  companyThumbnailRenditionUrls: PropTypes.shape().isRequired,\r\n  aboutUrl: PropTypes.string.isRequired,\r\n  contactUrl: PropTypes.string.isRequired,\r\n};\r\n","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Component representing a Topic displayed in the list of topics.\r\n *\r\n * @param {string} topic The topic to display\r\n */\r\nconst TopicsListItem = (props) => {\r\n  const { topic } = props;\r\n  const {\r\n    id,\r\n    name,\r\n    description,\r\n    renditionUrls,\r\n  } = topic;\r\n\r\n  return (\r\n    <Link to={{ pathname: `/${name == 'Deals and Offers' ? 'videos' : 'products'}/${id}`, search: `?topicName=${name}` }} style={{ textDecoration: 'none' }}>\r\n      <div className=\"topic\">\r\n        <div className=\"button-wrapper\">\r\n          <div className=\"button\">{name}</div>\r\n        </div>\r\n        {renditionUrls && (\r\n          <picture>\r\n            <source type=\"image/webp\" srcSet={renditionUrls.srcset} sizes=\"300px\" />\r\n            <source srcSet={renditionUrls.jpgSrcset} sizes=\"300px\" />\r\n            <img src={renditionUrls.thumbnail} alt=\"Topic Thumbnail\" />\r\n          </picture>\r\n        )}\r\n        <div className=\"desc-wrapper\">\r\n          <div className=\"description\">{description}</div>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default TopicsListItem;\r\n\r\nTopicsListItem.propTypes = {\r\n  topic: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    description: PropTypes.string,\r\n    renditionUrls: PropTypes.shape().isRequired,\r\n  }).isRequired,\r\n};\r\n","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Helmet } from 'react-helmet';\r\nimport { getTopicsListPageData } from '../scripts/services';\r\n\r\nimport Header from '../components/Header';\r\nimport TopicsListItem from '../components/TopicsListItem';\r\n\r\n/**\r\n * Component for the Topics List Page.\r\n */\r\nclass TopicsListPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let data;\r\n    if (process.env.IS_BROWSER) {\r\n      data = window.INITIAL_DATA;\r\n      delete window.INITIAL_DATA;\r\n    } else {\r\n      const { staticContext } = this.props;\r\n      data = staticContext.data;\r\n    }\r\n\r\n    this.state = {\r\n      data,\r\n      loading: !data,\r\n    };\r\n  }\r\n\r\n  // client side only : if this component doesn't already have its data, load it\r\n  componentDidMount() {\r\n    const { data } = this.state;\r\n    document.title = 'STC Home';\r\n\r\n    if (!data) {\r\n      this.fetchData();\r\n    }\r\n  }\r\n\r\n  // Client Side Data Fetching: called from Client when doing client side routing/hydration\r\n  fetchData() {\r\n    this.setState(() => ({\r\n      loading: true,\r\n    }));\r\n\r\n    getTopicsListPageData()\r\n      .then((data) => {\r\n        this.setState({\r\n          data,\r\n          loading: false,\r\n        });\r\n      });\r\n  }\r\n\r\n  // render the component\r\n  render() {\r\n    const { loading, data } = this.state;\r\n    if (loading === true || !data) {\r\n      return <div className=\"progress-spinner\" />;\r\n    }\r\n    const {\r\n      companyTitle,\r\n      companyThumbnailRenditionUrls,\r\n      aboutUrl,\r\n      contactUrl,\r\n      topics,\r\n    } = data;\r\n    return (\r\n      <div data-testid=\"TopicsListContainer\">\r\n        <Helmet>\r\n          <meta name=\"BUILD_TAG\" content={`${process.env.BUILD_TAG}`} />\r\n          <meta name=\"@oracle/gatsby-source-oce\" content={`${process.env.SDK_VERSION}`} />\r\n        </Helmet>\r\n        <Header\r\n          companyTitle={companyTitle}\r\n          companyThumbnailRenditionUrls={companyThumbnailRenditionUrls}\r\n          aboutUrl={aboutUrl}\r\n          contactUrl={contactUrl}\r\n        />\r\n        {topics && (\r\n        <div id=\"topics\">\r\n          {topics.map(\r\n            (topic) => (\r\n              <TopicsListItem topic={topic} key={topic.id} />\r\n            ),\r\n          )}\r\n        </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Server Side Data Fetching: called from Express server when sending HTML to client\r\nfunction fetchInitialData() {\r\n  return getTopicsListPageData();\r\n}\r\n\r\n/*\r\n * Export an object with name value pairs of fetchInitialData function and component.\r\n */\r\nexport default {\r\n  fetchInitialData,\r\n  component: TopicsListPage,\r\n};\r\n\r\nTopicsListPage.propTypes = {\r\n  staticContext: PropTypes.shape({\r\n    data: PropTypes.shape({}),\r\n  }),\r\n};\r\n\r\nTopicsListPage.defaultProps = {\r\n  staticContext: {},\r\n};\r\n","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { dateToMDY } from '../scripts/utils';\r\n\r\n/**\r\n * Component representing an Article List Item displayed in the list of articles.\r\n *\r\n * @param {string} topicId The Topic to which the Article belongs, used when creating\r\n *                         the link to the article details\r\n * @param {string} topicName The Topic name, used to render breadcrumbs\r\n * @param {object} article The Article to display\r\n */\r\nconst ArticlesListItem = (props) => {\r\n  const { article, topicName, topicId } = props;\r\n  const formattedDate = `Posted on ${dateToMDY(article.fields.published_date.value)}`;\r\n\r\n  // whole view is wrapped in a \"Link\" component with the URL of the format\r\n  // articles/articleId?topicName=name&topicId=id\r\n  return (\r\n    <Link\r\n      to={{\r\n        pathname: `/article/${article.id}`,\r\n        search: `?topicName=${topicName}&topicId=${topicId}`,\r\n      }}\r\n      style={{ textDecoration: 'none' }}\r\n    >\r\n      <div className=\"article\">\r\n\r\n        <div className=\"title-date\">\r\n          <h4 className=\"title\">{article.name}</h4>\r\n          <div className=\"date\">{formattedDate}</div>\r\n        </div>\r\n\r\n        {article.renditionUrls && (\r\n          <picture>\r\n            <source\r\n              type=\"image/webp\"\r\n              srcSet={article.renditionUrls.srcset}\r\n              sizes=\"80px\"\r\n            />\r\n            <source srcSet={article.renditionUrls.jpgSrcset} sizes=\"80px\" />\r\n            <img\r\n              src={article.renditionUrls.small}\r\n              alt=\"Article thumbnail\"\r\n              width={article.renditionUrls.width}\r\n              height={article.renditionUrls.height}\r\n            />\r\n          </picture>\r\n        )}\r\n\r\n        <div className=\"description\">\r\n          {article.description}\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default ArticlesListItem;\r\n\r\nArticlesListItem.propTypes = {\r\n  topicId: PropTypes.string.isRequired,\r\n  topicName: PropTypes.string.isRequired,\r\n  article: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    description: PropTypes.string,\r\n    renditionUrls: PropTypes.shape().isRequired,\r\n    fields: PropTypes.shape({\r\n      published_date: PropTypes.shape({\r\n        value: PropTypes.string.isRequired,\r\n      }),\r\n    }),\r\n  }).isRequired,\r\n};\r\n","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Component representing a single breadcrumb to be rendered in breadcrumbs.\r\n *\r\n * @param {object} linkParams contains the object to set for the \"to\" parameter\r\n *                            to the \"Link\" component when not empty, a \"Link\"\r\n *                            component is added arround the text,\r\n *                            when empty the text is rendered on its own\r\n *                            (i.e. no hyperlinking)\r\n * @param {string} text the text for the breadcrumb\r\n */\r\nconst Breadcrumb = (props) => {\r\n  const { linkParams, text } = props;\r\n  const includeLinkParams = Object.keys(linkParams).length > 0 && linkParams.constructor === Object;\r\n\r\n  return (\r\n    <li>\r\n      {includeLinkParams\r\n        ? <Link to={linkParams}>{text}</Link>\r\n        : text}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Breadcrumb;\r\n\r\n/*\r\n * Define the type of data used in this component.\r\n */\r\nBreadcrumb.propTypes = {\r\n  linkParams: PropTypes.shape({\r\n    pathname: PropTypes.string,\r\n    search: PropTypes.string,\r\n  }),\r\n  text: PropTypes.string.isRequired,\r\n};\r\n\r\nBreadcrumb.defaultProps = {\r\n  linkParams: {},\r\n};\r\n","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport BreadCrumb from './Breadcrumb';\r\n\r\n/**\r\n * Component representing a set of breadcrumbs.\r\n *\r\n * @param {array} breadcrumbsData the list of objects for each breadcrumb\r\n */\r\nconst Breadcrumbs = (props) => {\r\n  const { breadcrumbsData } = props;\r\n  return (\r\n    <div id=\"breadcrumb\">\r\n      <ul>\r\n        {breadcrumbsData.map(\r\n          (breadcrumbData) => (\r\n            <BreadCrumb\r\n              key={breadcrumbData.text}\r\n              linkParams={breadcrumbData.linkParams}\r\n              text={breadcrumbData.text}\r\n            />\r\n          ),\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Breadcrumbs;\r\n\r\n/*\r\n * Define the type of data used in this component.\r\n */\r\nBreadcrumbs.propTypes = {\r\n  breadcrumbsData: PropTypes.arrayOf(\r\n    PropTypes.shape({ BreadCrumb }.propTypes),\r\n  ).isRequired,\r\n};\r\n","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { fetchTopicArticles } from '../scripts/services';\r\n\r\nimport ArticlesListItem from '../components/ArticlesListItem';\r\nimport Breadcrumbs from '../components/Breadcrumbs';\r\n\r\n/**\r\n * Component for the Articles List Page.\r\n */\r\nclass ArticlesListPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { match } = this.props;\r\n    const { topicId } = match.params;\r\n\r\n    let data;\r\n    let topicName;\r\n    if (process.env.IS_BROWSER) {\r\n      data = window.INITIAL_DATA;\r\n      delete window.INITIAL_DATA;\r\n\r\n      const { location } = this.props;\r\n      const params = new URLSearchParams(location.search);\r\n      topicName = params.get('topicName');\r\n    } else {\r\n      const { staticContext } = this.props;\r\n      data = staticContext.data;\r\n      topicName = staticContext.requestQueryParams.topicName;\r\n    }\r\n\r\n    this.state = {\r\n      data,\r\n      loading: !data,\r\n      topicName,\r\n      topicId,\r\n    };\r\n  }\r\n\r\n  // executed client side only\r\n  componentDidMount() {\r\n    document.title = 'Articles';\r\n    const { data, topicId } = this.state;\r\n\r\n    if (!data) {\r\n      this.fetchData(topicId);\r\n    }\r\n  }\r\n\r\n  // called when any of the component's properties changes\r\n  // if the properties have changed, reload the data\r\n  componentDidUpdate(prevProps) {\r\n    const { topicId } = this.state;\r\n\r\n    if (prevProps.match.params.topicId !== topicId) {\r\n      this.fetchData(topicId);\r\n    }\r\n  }\r\n\r\n  // Client Side Data Fetching: called from Client when doing client side routing/hydration\r\n  fetchData(topicId) {\r\n    this.setState(() => ({\r\n      loading: true,\r\n    }));\r\n\r\n    fetchTopicArticles(topicId)\r\n      .then((data) => this.setState(() => ({\r\n        data,\r\n        loading: false,\r\n      })));\r\n  }\r\n\r\n  // render the component\r\n  render() {\r\n    const {\r\n      loading,\r\n      data,\r\n      topicName,\r\n      topicId,\r\n    } = this.state;\r\n    const breadcrumbsData = [\r\n      {\r\n        linkParams: { pathname: '/' },\r\n        text: 'Home',\r\n      },\r\n      {\r\n        linkParams: {},\r\n        text: topicName,\r\n      },\r\n    ];\r\n\r\n    if (loading === true) {\r\n      return <div className=\"progress-spinner\" />;\r\n    }\r\n\r\n    return (\r\n      <div data-testid=\"ArticlesListContainer\">\r\n        <Breadcrumbs breadcrumbsData={breadcrumbsData} />\r\n        {data.articles && (\r\n        <div id=\"articles\">\r\n          {data.articles.map(\r\n            (article) => (\r\n              <ArticlesListItem\r\n                article={article}\r\n                key={article.id}\r\n                topicName={topicName}\r\n                topicId={topicId}\r\n              />\r\n            ),\r\n          )}\r\n        </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Server Side Data Fetching: called from Express server when sending HTML to client\r\nfunction fetchInitialData(req) {\r\n  return fetchTopicArticles(req.path.split('/').pop());\r\n}\r\n\r\n/*\r\n * Export an object with name value pairs of fetchInitialData function and component.\r\n */\r\nexport default {\r\n  fetchInitialData,\r\n  component: ArticlesListPage,\r\n};\r\n\r\nArticlesListPage.propTypes = {\r\n\r\n  staticContext: PropTypes.shape({\r\n    data: PropTypes.shape(),\r\n    requestQueryParams: PropTypes.shape({\r\n      topicName: PropTypes.string,\r\n    }),\r\n  }),\r\n\r\n  match: PropTypes.shape({\r\n    params: PropTypes.shape({\r\n      topicId: PropTypes.string,\r\n    }),\r\n  }).isRequired,\r\n\r\n  location: PropTypes.shape({\r\n    search: PropTypes.string,\r\n  }).isRequired,\r\n};\r\n\r\nArticlesListPage.defaultProps = {\r\n  staticContext: {},\r\n};\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"xss\");","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\nimport filterXSS from 'xss';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { fetchArticleDetails } from '../scripts/services';\r\nimport { dateToMDY } from '../scripts/utils';\r\nimport Breadcrumbs from '../components/Breadcrumbs';\r\n\r\n/**\r\n * Component for the Articles List Page.\r\n */\r\nclass ArticleDetailsPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let data;\r\n    let topicName;\r\n    let topicId;\r\n    if (process.env.IS_BROWSER) {\r\n      data = window.INITIAL_DATA;\r\n      delete window.INITIAL_DATA;\r\n\r\n      const { location } = this.props;\r\n      const params = new URLSearchParams(location.search);\r\n      topicName = params.get('topicName');\r\n      topicId = params.get('topicId');\r\n    } else {\r\n      const { staticContext } = this.props;\r\n      data = staticContext.data;\r\n      topicName = staticContext.requestQueryParams.topicName;\r\n      topicId = staticContext.requestQueryParams.topicId;\r\n    }\r\n\r\n    this.state = {\r\n      data,\r\n      loading: !data,\r\n      topicId,\r\n      topicName,\r\n    };\r\n  }\r\n\r\n  // executed client side only\r\n  componentDidMount() {\r\n    document.title = 'Article';\r\n\r\n    const { match } = this.props;\r\n\r\n    const { data } = this.state;\r\n    if (!data) {\r\n      this.fetchData(match.params.articleId);\r\n    }\r\n  }\r\n\r\n  // called when any of the component's properties changes\r\n  // if the properties have changed, reload the data\r\n  componentDidUpdate(prevProps) {\r\n    const { match } = this.props;\r\n\r\n    if (prevProps.match.params.articleId !== match.params.articleId) {\r\n      this.fetchData(match.params.articleId);\r\n    }\r\n  }\r\n\r\n  // Client Side Data Fetching: called from Client when doing client side routing/hydration\r\n  fetchData(articleId) {\r\n    this.setState(() => ({\r\n      loading: true,\r\n    }));\r\n\r\n    fetchArticleDetails(articleId)\r\n      .then((data) => this.setState(() => ({\r\n        data,\r\n        loading: false,\r\n      })));\r\n  }\r\n\r\n  // render the component\r\n  render() {\r\n    const {\r\n      loading,\r\n      data,\r\n      topicId,\r\n      topicName,\r\n    } = this.state;\r\n    if (loading === true) {\r\n      return <div className=\"progress-spinner\" />;\r\n    }\r\n    const {\r\n      name,\r\n      title,\r\n      date,\r\n      content,\r\n      imageCaption,\r\n    } = data;\r\n    // Breadcrumbs :  Home > topicName > articleName (read only)\r\n    // - \"Home\" url      =  \"/\"\r\n    // - \"topicName\" url =  \"/articles/topicId?topicName=name\"\r\n    const breadcrumbsData = [\r\n      {\r\n        linkParams: { pathname: '/' },\r\n        text: 'Home',\r\n      },\r\n      {\r\n        linkParams: { pathname: `/articles/${topicId}`, search: `?topicName=${topicName}` },\r\n        text: topicName,\r\n      },\r\n      {\r\n        linkParams: {},\r\n        text: name,\r\n      },\r\n    ];\r\n\r\n    const formattedDate = (date && date.value) ? `Posted on ${dateToMDY(date.value)}` : '';\r\n    const options = {\r\n      stripIgnoreTag: true, // filter out all HTML not in the whitelist\r\n      stripIgnoreTagBody: ['script'], // the script tag is a special case, we need\r\n      // to filter out its content\r\n    };\r\n    // eslint-disable-next-line no-undef\r\n    const cleancontent = filterXSS(content, options);\r\n\r\n    return (\r\n      <div>\r\n        <Breadcrumbs breadcrumbsData={breadcrumbsData} />\r\n        <div id=\"article\">\r\n          <div className=\"author\">\r\n            {/* Avatar */}\r\n            {data.authorRenditionUrls && (\r\n              <picture>\r\n                <source\r\n                  type=\"image/webp\"\r\n                  srcSet={data.authorRenditionUrls.srcset}\r\n                  sizes=\"80px\"\r\n                />\r\n                <source srcSet={data.authorRenditionUrls.jpgSrcset} sizes=\"80px\" />\r\n                <img src={data.authorRenditionUrls.small} alt=\"Author Avatar\" />\r\n              </picture>\r\n            )}\r\n\r\n            {/*  Author Name / Date */}\r\n            <div className=\"name_date\">\r\n              <h4 className=\"title\">{title}</h4>\r\n              <div className=\"date\">\r\n                {formattedDate}\r\n                {' '}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Article Image and caption */}\r\n          <figure>\r\n            {data.renditionUrls && (\r\n              <picture>\r\n                <source type=\"image/webp\" srcSet={data.renditionUrls.srcset} />\r\n                <source srcSet={data.renditionUrls.jpgSrcset} />\r\n                <img\r\n                  src={data.renditionUrls.large}\r\n                  alt=\"Article\"\r\n                  width={data.renditionUrls.width}\r\n                  height={data.renditionUrls.height}\r\n                />\r\n              </picture>\r\n            )}\r\n            <figcaption>{imageCaption}</figcaption>\r\n          </figure>\r\n\r\n          {/* Article Content */}\r\n          <div className=\"content\">\r\n            { content.indexOf('</') !== -1\r\n              ? (\r\n                // eslint-disable-next-line react/no-danger\r\n                <div dangerouslySetInnerHTML={{ __html: cleancontent }} />\r\n              )\r\n              : cleancontent}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Server Side Data Fetching: called from Express server when sending HTML to client\r\nfunction fetchInitialData(req) {\r\n  return fetchArticleDetails(req.path.split('/').pop());\r\n}\r\n\r\n/*\r\n * Export an object with name value pairs of fetchInitialData function and component.\r\n */\r\nexport default {\r\n  fetchInitialData,\r\n  component: ArticleDetailsPage,\r\n};\r\n\r\nArticleDetailsPage.propTypes = {\r\n  staticContext: PropTypes.shape({\r\n    data: PropTypes.shape({}),\r\n    requestQueryParams: PropTypes.shape({\r\n      topicName: PropTypes.string,\r\n      topicId: PropTypes.string,\r\n    }),\r\n  }),\r\n\r\n  match: PropTypes.shape({\r\n    params: PropTypes.shape({\r\n      articleId: PropTypes.string,\r\n    }),\r\n  }).isRequired,\r\n\r\n  location: PropTypes.shape({\r\n    search: PropTypes.string,\r\n  }).isRequired,\r\n};\r\n\r\nArticleDetailsPage.defaultProps = {\r\n  staticContext: {},\r\n};\r\n","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\n import React from 'react';\r\n import PropTypes from 'prop-types';\r\n import { Link } from 'react-router-dom';\r\n \r\n /**\r\n  * Component representing an Product List Item displayed in the list of products.\r\n  *\r\n  * @param {string} topicId The Topic to which the Product belongs, used when creating\r\n  *                         the link to the product details\r\n  * @param {string} topicName The Topic name, used to render breadcrumbs\r\n  * @param {object} product The Product to display\r\n  */\r\n const ProductsListItem = (props) => {\r\n   const { product, topicName, topicId } = props;\r\n \r\n   // whole view is wrapped in a \"Link\" component with the URL of the format\r\n   // products/productId?topicName=name&topicId=id\r\n   return (\r\n     <Link\r\n       to={{\r\n         pathname: `/product/${product.id}`,\r\n         search: `?topicName=${topicName}&topicId=${topicId}`,\r\n       }}\r\n       style={{ textDecoration: 'none' }}\r\n     >\r\n       <div className=\"article\">\r\n \r\n         <div className=\"title-date\">\r\n           <h4 className=\"title\">{product.name}</h4>\r\n         </div>\r\n \r\n         {product.renditionUrls && (\r\n           <picture>\r\n             <source\r\n               type=\"image/webp\"\r\n               srcSet={product.renditionUrls.srcset}\r\n               sizes=\"80px\"\r\n             />\r\n             <source srcSet={product.renditionUrls.jpgSrcset} sizes=\"80px\" />\r\n             <img\r\n               src={product.renditionUrls.small}\r\n               alt=\"Product thumbnail\"\r\n               width={product.renditionUrls.width}\r\n               height={product.renditionUrls.height}\r\n             />\r\n           </picture>\r\n         )}\r\n \r\n         <div className=\"description\">\r\n           {product.description}\r\n         </div>\r\n       </div>\r\n     </Link>\r\n   );\r\n };\r\n \r\n export default ProductsListItem;\r\n \r\n ProductsListItem.propTypes = {\r\n  topicId: PropTypes.string.isRequired,\r\n  topicName: PropTypes.string.isRequired,\r\n  product: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    description: PropTypes.string,\r\n    renditionUrls: PropTypes.shape().isRequired,\r\n    fields: PropTypes.shape({\r\n      releaseDate: PropTypes.shape({\r\n        value: PropTypes.string.isRequired,\r\n      }),\r\n    }),\r\n  }).isRequired,\r\n};","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\n import React from 'react';\r\n import PropTypes from 'prop-types';\r\n import { fetchTopicProducts } from '../scripts/services';\r\n \r\n import ProductsListItem from '../components/ProductsListItem';\r\n import Breadcrumbs from '../components/Breadcrumbs';\r\n \r\n /**\r\n  * Component for the Products List Page.\r\n  */\r\n class ProductsListPage extends React.Component {\r\n   constructor(props) {\r\n     super(props);\r\n \r\n     const { match } = this.props;\r\n     const { topicId } = match.params;\r\n \r\n     let data;\r\n     let topicName;\r\n     if (process.env.IS_BROWSER) {\r\n       data = window.INITIAL_DATA;\r\n       delete window.INITIAL_DATA;\r\n \r\n       const { location } = this.props;\r\n       const params = new URLSearchParams(location.search);\r\n       topicName = params.get('topicName');\r\n     } else {\r\n       const { staticContext } = this.props;\r\n       data = staticContext.data;\r\n       topicName = staticContext.requestQueryParams.topicName;\r\n     }\r\n \r\n     this.state = {\r\n       data,\r\n       loading: !data,\r\n       topicName,\r\n       topicId,\r\n     };\r\n   }\r\n \r\n   // executed client side only\r\n   componentDidMount() {\r\n     document.title = 'Products';\r\n     const { data, topicId } = this.state;\r\n \r\n     if (!data) {\r\n       this.fetchData(topicId);\r\n     }\r\n   }\r\n \r\n   // called when any of the component's properties changes\r\n   // if the properties have changed, reload the data\r\n   componentDidUpdate(prevProps) {\r\n     const { topicId } = this.state;\r\n \r\n     if (prevProps.match.params.topicId !== topicId) {\r\n       this.fetchData(topicId);\r\n     }\r\n   }\r\n \r\n   // Client Side Data Fetching: called from Client when doing client side routing/hydration\r\n   fetchData(topicId) {\r\n     this.setState(() => ({\r\n       loading: true,\r\n     }));\r\n \r\n     fetchTopicProducts(topicId)\r\n       .then((data) => this.setState(() => ({\r\n         data,\r\n         loading: false,\r\n       })));\r\n   }\r\n \r\n   // render the component\r\n   render() {\r\n     const {\r\n       loading,\r\n       data,\r\n       topicName,\r\n       topicId,\r\n     } = this.state;\r\n     const breadcrumbsData = [\r\n       {\r\n         linkParams: { pathname: '/' },\r\n         text: 'Home',\r\n       },\r\n       {\r\n         linkParams: {},\r\n         text: topicName,\r\n       },\r\n     ];\r\n \r\n     if (loading === true) {\r\n       return <div className=\"progress-spinner\" />;\r\n     }\r\n \r\n     return (\r\n       <div data-testid=\"ProductsListContainer\">\r\n         <Breadcrumbs breadcrumbsData={breadcrumbsData} />\r\n         {data.products && (\r\n         <div id=\"articles\">\r\n           {data.products.map(\r\n             (product) => (\r\n               <ProductsListItem\r\n                 product={product}\r\n                 key={product.id}\r\n                 topicName={topicName}\r\n                 topicId={topicId}\r\n               />\r\n             ),\r\n           )}\r\n         </div>\r\n         )}\r\n       </div>\r\n     );\r\n   }\r\n }\r\n \r\n // Server Side Data Fetching: called from Express server when sending HTML to client\r\n function fetchInitialData(req) {\r\n   return fetchTopicProducts(req.path.split('/').pop());\r\n }\r\n \r\n /*\r\n  * Export an object with name value pairs of fetchInitialData function and component.\r\n  */\r\n export default {\r\n   fetchInitialData,\r\n   component: ProductsListPage,\r\n };\r\n \r\n ProductsListPage.propTypes = {\r\n \r\n   staticContext: PropTypes.shape({\r\n     data: PropTypes.shape(),\r\n     requestQueryParams: PropTypes.shape({\r\n       topicName: PropTypes.string,\r\n     }),\r\n   }),\r\n \r\n   match: PropTypes.shape({\r\n     params: PropTypes.shape({\r\n       topicId: PropTypes.string,\r\n     }),\r\n   }).isRequired,\r\n \r\n   location: PropTypes.shape({\r\n     search: PropTypes.string,\r\n   }).isRequired,\r\n };\r\n \r\n ProductsListPage.defaultProps = {\r\n   staticContext: {},\r\n };\r\n ","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\n import filterXSS from 'xss';\r\n import React from 'react';\r\n import PropTypes from 'prop-types';\r\n import { fetchProductDetails } from '../scripts/services';\r\n import Breadcrumbs from '../components/Breadcrumbs';\r\n \r\n /**\r\n  * Component for the Products List Page.\r\n  */\r\n class ProductDetailsPage extends React.Component {\r\n   constructor(props) {\r\n     super(props);\r\n \r\n     let data;\r\n     let topicName;\r\n     let topicId;\r\n     if (process.env.IS_BROWSER) {\r\n       data = window.INITIAL_DATA;\r\n       delete window.INITIAL_DATA;\r\n \r\n       const { location } = this.props;\r\n       const params = new URLSearchParams(location.search);\r\n       topicName = params.get('topicName');\r\n       topicId = params.get('topicId');\r\n     } else {\r\n       const { staticContext } = this.props;\r\n       data = staticContext.data;\r\n       topicName = staticContext.requestQueryParams.topicName;\r\n       topicId = staticContext.requestQueryParams.topicId;\r\n     }\r\n \r\n     this.state = {\r\n       data,\r\n       loading: !data,\r\n       topicId,\r\n       topicName,\r\n     };\r\n   }\r\n \r\n   // executed client side only\r\n   componentDidMount() {\r\n     document.title = 'Product';\r\n \r\n     const { match } = this.props;\r\n \r\n     const { data } = this.state;\r\n     if (!data) {\r\n       this.fetchData(match.params.productId);\r\n     }\r\n   }\r\n \r\n   // called when any of the component's properties changes\r\n   // if the properties have changed, reload the data\r\n   componentDidUpdate(prevProps) {\r\n     const { match } = this.props;\r\n \r\n     if (prevProps.match.params.productId !== match.params.productId) {\r\n       this.fetchData(match.params.productId);\r\n     }\r\n   }\r\n \r\n   // Client Side Data Fetching: called from Client when doing client side routing/hydration\r\n   fetchData(productId) {\r\n     this.setState(() => ({\r\n       loading: true,\r\n     }));\r\n \r\n     fetchProductDetails(productId)\r\n       .then((data) => this.setState(() => ({\r\n         data,\r\n         loading: false,\r\n       })));\r\n   }\r\n \r\n   // render the component\r\n   render() {\r\n     const {\r\n       loading,\r\n       data,\r\n       topicId,\r\n       topicName,\r\n     } = this.state;\r\n     if (loading === true) {\r\n       return <div className=\"progress-spinner\" />;\r\n     }\r\n     const {\r\n       name,\r\n       description,\r\n       title,\r\n       content,\r\n       productColor,\r\n       productStorage,\r\n     } = data;\r\n     // Breadcrumbs :  Home > topicName > productName (read only)\r\n     // - \"Home\" url      =  \"/\"\r\n     // - \"topicName\" url =  \"/products/topicId?topicName=name\"\r\n     const breadcrumbsData = [\r\n       {\r\n         linkParams: { pathname: '/' },\r\n         text: 'Home',\r\n       },\r\n       {\r\n         linkParams: { pathname: `/products/${topicId}`, search: `?topicName=${topicName}` },\r\n         text: topicName,\r\n       },\r\n       {\r\n         linkParams: {},\r\n         text: name,\r\n       },\r\n     ];\r\n\r\n     const options = {\r\n      stripIgnoreTag: true, // filter out all HTML not in the whitelist\r\n      stripIgnoreTagBody: ['script'], // the script tag is a special case, we need\r\n      // to filter out its content\r\n    };\r\n    // eslint-disable-next-line no-undef\r\n    const cleancontent = filterXSS(content, options);\r\n    \r\n     return (\r\n       <div>\r\n         <Breadcrumbs breadcrumbsData={breadcrumbsData} />\r\n         <div id=\"article\">\r\n           <div className=\"author\">\r\n             {/* Avatar */}\r\n             {data.producerRenditionUrls && (\r\n               <picture>\r\n                 <source\r\n                   type=\"image/webp\"\r\n                   srcSet={data.producerRenditionUrls.srcset}\r\n                   sizes=\"80px\"\r\n                 />\r\n                 <source srcSet={data.producerRenditionUrls.jpgSrcset} sizes=\"80px\" />\r\n                 <img src={data.producerRenditionUrls.small} alt=\"Producer Avatar\" />\r\n               </picture>\r\n             )}\r\n \r\n             {/*  Producer Name, Product Storage, Product Color*/}\r\n             <div className=\"name_date\">\r\n               <h4 className=\"specs\">{title}</h4>\r\n               <h4 className=\"specs\">{productStorage}</h4>\r\n               <h4 className=\"specs\">{productColor}</h4>\r\n             </div>\r\n           </div>\r\n \r\n           <div className='align-product'>\r\n           {/* Product Image */}\r\n           <figure>\r\n             {data.renditionUrls && (\r\n               <picture>\r\n                 <source type=\"image/webp\" srcSet={data.renditionUrls.srcset} />\r\n                 <source srcSet={data.renditionUrls.jpgSrcset} />\r\n                 <img\r\n                   src={data.renditionUrls.large}\r\n                   alt=\"Product\"\r\n                   width={data.renditionUrls.width}\r\n                   height={data.renditionUrls.height}\r\n                 />\r\n               </picture>\r\n             )}\r\n           </figure>\r\n \r\n           {/* Product Content */}\r\n           <div className=\"content\">\r\n             {description}\r\n             { content.indexOf('</') !== -1\r\n                  ? (\r\n                    // eslint-disable-next-line react/no-danger\r\n                    <div dangerouslySetInnerHTML={{ __html: cleancontent }} />\r\n                  )\r\n                  : cleancontent}\r\n           </div>\r\n           </div>\r\n         </div>\r\n       </div>\r\n     );\r\n   }\r\n }\r\n \r\n // Server Side Data Fetching: called from Express server when sending HTML to client\r\n function fetchInitialData(req) {\r\n   return fetchProductDetails(req.path.split('/').pop());\r\n }\r\n \r\n /*\r\n  * Export an object with name value pairs of fetchInitialData function and component.\r\n  */\r\n export default {\r\n   fetchInitialData,\r\n   component: ProductDetailsPage,\r\n };\r\n \r\n ProductDetailsPage.propTypes = {\r\n   staticContext: PropTypes.shape({\r\n     data: PropTypes.shape({}),\r\n     requestQueryParams: PropTypes.shape({\r\n       topicName: PropTypes.string,\r\n       topicId: PropTypes.string,\r\n     }),\r\n   }),\r\n \r\n   match: PropTypes.shape({\r\n     params: PropTypes.shape({\r\n       productId: PropTypes.string,\r\n     }),\r\n   }).isRequired,\r\n \r\n   location: PropTypes.shape({\r\n     search: PropTypes.string,\r\n   }).isRequired,\r\n };\r\n \r\n ProductDetailsPage.defaultProps = {\r\n   staticContext: {},\r\n };\r\n ","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\n import React from 'react';\r\n import PropTypes from 'prop-types';\r\n import { Link } from 'react-router-dom';\r\n \r\n /**\r\n  * Component representing an Video List Item displayed in the list of videos.\r\n  *\r\n  * @param {string} topicId The Topic to which the Video belongs, used when creating\r\n  *                         the link to the video details\r\n  * @param {string} topicName The Topic name, used to render breadcrumbs\r\n  * @param {object} video The Video to display\r\n  */\r\n const VideosListItem = (props) => {\r\n   const { video, topicName, topicId } = props;\r\n \r\n   // whole view is wrapped in a \"Link\" component with the URL of the format\r\n   // videos/videoId?topicName=name&topicId=id\r\n   return (\r\n     <a href={video.fields.videoBrowseUrl}>\r\n       <div className=\"article\">\r\n \r\n         <div className=\"title-date\">\r\n           <h4 className=\"title\">{video.fields.videoTitle}</h4>\r\n         </div>\r\n \r\n         {video.fields.videoThumbnailUrl && (\r\n           <picture>\r\n             <source\r\n               type=\"image/webp\"\r\n               srcSet={video.fields.videoThumbnailUrl}\r\n               sizes=\"80px\"\r\n             />\r\n             <source srcSet={video.fields.videoThumbnailUrl} sizes=\"80px\" />\r\n             <img\r\n               src={video.fields.videoThumbnailUrl}\r\n               alt=\"Video thumbnail\"\r\n             />\r\n           </picture>\r\n         )}\r\n \r\n         <div className=\"description\">\r\n           {video.fields.videoDescription}\r\n         </div>\r\n       </div>\r\n     </a>\r\n   );\r\n };\r\n \r\n export default VideosListItem;\r\n \r\n VideosListItem.propTypes = {\r\n  topicId: PropTypes.string.isRequired,\r\n  topicName: PropTypes.string.isRequired,\r\n  video: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    fields: PropTypes.shape({\r\n      videoTitle: PropTypes.string.isRequired,\r\n\t  videoDescription: PropTypes.string.isRequired,\r\n\t  videoThumbnailUrl: PropTypes.string.isRequired,\r\n\t  videoBrowseUrl: PropTypes.string.isRequired,\r\n\t  releaseDate: PropTypes.shape({\r\n        value: PropTypes.string.isRequired,\r\n      }),\r\n    }),\r\n  }).isRequired,\r\n};\r\n","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\n import React from 'react';\r\n import PropTypes from 'prop-types';\r\n import { fetchTopicVideos } from '../scripts/services';\r\n \r\n import VideosListItem from '../components/VideosListItem';\r\n import Breadcrumbs from '../components/Breadcrumbs';\r\n \r\n /**\r\n  * Component for the Videos List Page.\r\n  */\r\n class VideosListPage extends React.Component {\r\n   constructor(props) {\r\n     super(props);\r\n \r\n     const { match } = this.props;\r\n     const { topicId } = match.params;\r\n \r\n     let data;\r\n     let topicName;\r\n     if (process.env.IS_BROWSER) {\r\n       data = window.INITIAL_DATA;\r\n       delete window.INITIAL_DATA;\r\n \r\n       const { location } = this.props;\r\n       const params = new URLSearchParams(location.search);\r\n       topicName = params.get('topicName');\r\n     } else {\r\n       const { staticContext } = this.props;\r\n       data = staticContext.data;\r\n       topicName = staticContext.requestQueryParams.topicName;\r\n     }\r\n \r\n     this.state = {\r\n       data,\r\n       loading: !data,\r\n       topicName,\r\n       topicId,\r\n     };\r\n   }\r\n \r\n   // executed client side only\r\n   componentDidMount() {\r\n     document.title = 'Videos';\r\n     const { data, topicId } = this.state;\r\n \r\n     if (!data) {\r\n       this.fetchData(topicId);\r\n     }\r\n   }\r\n \r\n   // called when any of the component's properties changes\r\n   // if the properties have changed, reload the data\r\n   componentDidUpdate(prevProps) {\r\n     const { topicId } = this.state;\r\n \r\n     if (prevProps.match.params.topicId !== topicId) {\r\n       this.fetchData(topicId);\r\n     }\r\n   }\r\n \r\n   // Client Side Data Fetching: called from Client when doing client side routing/hydration\r\n   fetchData(topicId) {\r\n     this.setState(() => ({\r\n       loading: true,\r\n     }));\r\n \r\n     fetchTopicVideos(topicId)\r\n       .then((data) => this.setState(() => ({\r\n         data,\r\n         loading: false,\r\n       })));\r\n   }\r\n \r\n   // render the component\r\n   render() {\r\n     const {\r\n       loading,\r\n       data,\r\n       topicName,\r\n       topicId,\r\n     } = this.state;\r\n     const breadcrumbsData = [\r\n       {\r\n         linkParams: { pathname: '/' },\r\n         text: 'Home',\r\n       },\r\n       {\r\n         linkParams: {},\r\n         text: topicName,\r\n       },\r\n     ];\r\n \r\n     if (loading === true) {\r\n       return <div className=\"progress-spinner\" />;\r\n     }\r\n \r\n     return (\r\n       <div data-testid=\"VideosListContainer\">\r\n         <Breadcrumbs breadcrumbsData={breadcrumbsData} />\r\n         {data.videos && (\r\n         <div id=\"articles\">\r\n           {data.videos.map(\r\n             (video) => (\r\n               <VideosListItem\r\n                 video={video}\r\n                 key={video.id}\r\n                 topicName={topicName}\r\n                 topicId={topicId}\r\n               />\r\n             ),\r\n           )}\r\n         </div>\r\n         )}\r\n       </div>\r\n     );\r\n   }\r\n }\r\n \r\n // Server Side Data Fetching: called from Express server when sending HTML to client\r\n function fetchInitialData(req) {\r\n   return fetchTopicVideos(req.path.split('/').pop());\r\n }\r\n \r\n /*\r\n  * Export an object with name value pairs of fetchInitialData function and component.\r\n  */\r\n export default {\r\n   fetchInitialData,\r\n   component: VideosListPage,\r\n };\r\n \r\n VideosListPage.propTypes = {\r\n \r\n   staticContext: PropTypes.shape({\r\n     data: PropTypes.shape(),\r\n     requestQueryParams: PropTypes.shape({\r\n       topicName: PropTypes.string,\r\n     }),\r\n   }),\r\n \r\n   match: PropTypes.shape({\r\n     params: PropTypes.shape({\r\n       topicId: PropTypes.string,\r\n     }),\r\n   }).isRequired,\r\n \r\n   location: PropTypes.shape({\r\n     search: PropTypes.string,\r\n   }).isRequired,\r\n };\r\n \r\n VideosListPage.defaultProps = {\r\n   staticContext: {},\r\n };\r\n ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/*\r\n * Component for the not found page.\r\n *\r\n * The \"staticContext\" property passed in to this component is the context object created\r\n * in \"server.js\". It is renamed by the \"StaticRouter\" when it passes it on to this component.\r\n * When rendering on the client side, the staticContext will be empty as there is no StaticRouter\r\n * on the client side. Therefore the property is defaulted to an empty object.\r\n */\r\nconst NotFoundPage = ({ staticContext = {} }) => {\r\n  staticContext.notFound = true;\r\n\r\n  return <h1 className=\"error\">Sorry, the page you are requesting has not been found.</h1>;\r\n};\r\n\r\nexport default {\r\n  component: NotFoundPage,\r\n};\r\n\r\nNotFoundPage.propTypes = {\r\n  staticContext: PropTypes.shape({\r\n    notFound: PropTypes.string,\r\n  }),\r\n};\r\n\r\nNotFoundPage.defaultProps = {\r\n  staticContext: {},\r\n};\r\n","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\n\r\n/**\r\n * Contains the Routes used in the Client and Server routers.\r\n */\r\nimport TopicsListPage from './TopicsListPage';\r\nimport ArticlesListPage from './ArticlesListPage';\r\nimport ArticleDetailsPage from './ArticleDetailsPage';\r\nimport ProductsListPage from './ProductsListPage';\r\nimport ProductDetailsPage from './ProductDetailsPage';\r\nimport VideosListPage from './VideosListPage';\r\nimport NotFoundPage from './NotFoundPage';\r\n\r\nexport default [\r\n  {\r\n    ...TopicsListPage,\r\n    path: '/',\r\n    exact: true,\r\n    title: 'Topics',\r\n  },\r\n  {\r\n    ...ArticlesListPage,\r\n    path: '/articles/:topicId',\r\n    exact: true,\r\n    title: 'Articles',\r\n  },\r\n  {\r\n    ...ArticleDetailsPage,\r\n    path: '/article/:articleId',\r\n    exact: true,\r\n    title: 'Article',\r\n  },\r\n  {\r\n    ...ProductsListPage,\r\n    path: '/products/:topicId',\r\n    exact: true,\r\n    title: 'Prodcuts',\r\n  },\r\n  {\r\n    ...ProductDetailsPage,\r\n    path: '/product/:productId',\r\n    exact: true,\r\n    title: 'Product',\r\n  },\r\n  {\r\n    ...VideosListPage,\r\n    path: '/videos/:topicId',\r\n    exact: true,\r\n    title: 'Videos',\r\n  },\r\n  {\r\n    ...NotFoundPage,\r\n    path: '*',\r\n    exact: false,\r\n    title: 'Page Not Found',\r\n  },\r\n];\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-dom/server\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"react-router-config\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"serialize-javascript\");","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\n\r\n/**\r\n * Entry point for the server side application.\r\n *\r\n * This is a simple Express Server.\r\n *\r\n * \"webpack.server.config.js\" is where this file is specified as the server side entry point.\r\n */\r\nimport 'core-js'; // replacement for babel-polyfill in babel 7.4 & above\r\nimport 'regenerator-runtime/runtime'; // replacement for babel-polyfill in babel 7.4 & above\r\nimport express from 'express';\r\n// If we don't import Switch, then the routing fails due to code in react-router-config\r\n// that references router.Switch\r\n// eslint-disable-next-line no-unused-vars\r\nimport { matchPath } from 'react-router-dom';\r\nimport http from 'http';\r\nimport https from 'https';\r\nimport Routes from '../pages/Routes';\r\nimport renderer from './renderer';\r\nimport getClient from '../scripts/server-config-utils';\r\n\r\n/*\r\n * Create an instance of an Express server\r\n */\r\nconst server = express();\r\n\r\n/*\r\n * Open all the files/folders in the \"public\" directory to the outside world by telling Express\r\n * to treat the \"public\" directory as a freely available public directory. Static assets can\r\n * therefore be served from ./public on the /public route.\r\n */\r\nserver.use(express.static('public'));\r\n\r\n/*\r\n * Handle the proxy request.\r\n */\r\nfunction handleContentRequest(req, res, authValue) {\r\n  // only proxy GET requests, ignore all other requests\r\n  if (req.method !== 'GET') {\r\n    return;\r\n  }\r\n\r\n  // build the URL to the real server\r\n  let content = process.env.SERVER_URL.charAt(process.env.SERVER_URL.length - 1) === '/'\r\n    ? 'content' : '/content';\r\n  if (req.url.charAt(0) !== '/') {\r\n    content = `${content}/`;\r\n  }\r\n  const oceUrl = `${process.env.SERVER_URL}${content}${req.url}`;\r\n\r\n  // Add the authorization header\r\n  const options = {};\r\n  if (authValue) {\r\n    options.headers = { Authorization: authValue };\r\n  }\r\n\r\n  // define a function that writes the proxied content to the response\r\n  const writeProxyContent = (proxyResponse) => {\r\n    res.writeHead(proxyResponse.statusCode, proxyResponse.headers);\r\n    proxyResponse.pipe(res, {\r\n      end: true,\r\n    });\r\n  };\r\n\r\n  // based on whether the Content server is HTTP or HTTPS make the request to it\r\n  const proxy = (oceUrl.startsWith('https'))\r\n    ? https.request(oceUrl, options, (proxyResponse) => writeProxyContent(proxyResponse))\r\n    : http.request(oceUrl, options, (proxyResponse) => writeProxyContent(proxyResponse));\r\n\r\n  // write the proxied response to this request's response\r\n\r\n  req.pipe(proxy, {\r\n    end: true,\r\n  });\r\n}\r\n\r\n/*\r\n * Route handler for requests to '/content/'.\r\n *\r\n * When authorization is needed for the calls to Oracle Content\r\n * - all image requests will be proxied through here regardless of server or client side rendering\r\n * - browser requests for content are proxied through here (server content requests will never be\r\n *   proxied)\r\n * - this server will pass on the call to Oracle Content adding on the authorization headers and\r\n *   returning the Oracle Content response.\r\n * This ensures the browser will never have the authorization header visible in its requests.\r\n *\r\n * See the following files where proxying is setup\r\n * - 'src/scripts/server-config-utils.getClient' for the code proxying requests for content\r\n * - 'src/scripts/utils.getImageUrl' for the code proxying requests for image binaries\r\n */\r\nserver.use('/content/', (req, res) => {\r\n  const client = getClient();\r\n  client.getAuthorizationHeaderValue().then((authValue) => {\r\n    handleContentRequest(req, res, authValue);\r\n  });\r\n});\r\n\r\n/*\r\n * Create a single route handler to listen to all (*) routes of our application\r\n */\r\nserver.get('*', (req, res) => {\r\n  const activeRoute = Routes.find((route) => matchPath(req.url, route)) || {};\r\n\r\n  const promise = activeRoute.fetchInitialData\r\n    ? activeRoute.fetchInitialData(req)\r\n    : Promise.resolve();\r\n\r\n  promise.then((data) => {\r\n    const context = { data, requestQueryParams: req.query };\r\n    // get the content to return to the client\r\n    const content = renderer(req, context);\r\n\r\n    // if the route requested was not found, the content object will have its \"notFound\"\r\n    // property set, therefore we need to change the response code to a 404, not found\r\n    if (context.notFound) {\r\n      res.status(404);\r\n    }\r\n\r\n    // send the response\r\n    res.send(content);\r\n  });\r\n});\r\n\r\n/*\r\n * Set the port the Express server is listening on\r\n */\r\nconst port = process.env.PORT || 8080;\r\nserver.listen(port, () => {\r\n  console.log(`Application is accessible on : http://localhost:${port}`);\r\n});\r\n","/**\r\n * Copyright (c) 2020, 2022, Oracle and/or its affiliates.\r\n * Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\r\n */\r\n\r\n/**\r\n * Handles the generation of the server generated HTML.\r\n */\r\nimport React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { renderToString } from 'react-dom/server';\r\nimport { StaticRouter } from 'react-router-dom';\r\nimport { renderRoutes } from 'react-router-config';\r\nimport serialize from 'serialize-javascript';\r\n\r\nimport Routes from '../pages/Routes';\r\n\r\nexport default (req, context) => {\r\n  // generate the HTML content for this application\r\n  const content = renderToString(\r\n    <StaticRouter context={context} location={req.path} basename={process.env.BASE_URL}>\r\n      <div>{renderRoutes(Routes)}</div>\r\n    </StaticRouter>,\r\n  );\r\n  const helmet = Helmet.renderStatic();\r\n\r\n  // if there is a BASE_URL we want the artifacts in the \"public\" folder to\r\n  // be accessed with a relative URL, otherwise we want an absolute URL\r\n  // this is so http://host:port/routeA or http://host:port/routeA/param/value\r\n  // will get the items from the \"public\" folder\r\n  const stylesFile = `${process.env.BASE_URL}/styles.css`;\r\n  const favIconFile = `${process.env.BASE_URL}/favicon.png`;\r\n  const clientBundleFile = `${process.env.BASE_URL}/client-bundle.js`;\r\n\r\n  // Generate the final HTML content as a full HTML document\r\n  // The body contains:\r\n  // - a relative link to get the stylesheet for the page\r\n  // - serialized data stored in the window (must be before the application content)\r\n  // - the content from the application\r\n  // - a script tag containing a relative link, telling the client to get the client\r\n  //   side JavaScript bundle from the server\r\n  // Note: the server has been set up to serve static content from the \"public\" directory\r\n  // (see the \"app.use\" in \"server.js\").\r\n  return `\r\n    <!DOCTYPE html>\r\n    <html lang=\"en-us\">\r\n      <head>\r\n        <meta charset=\"utf-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n        <meta name=\"description\" content=\"Sample blog app created in React that utilizes the content sdk library\">\r\n\r\n        <title>Blog - React</title>\r\n        <link rel=\"icon\" href=\"${favIconFile}\" type=\"image/png\">\r\n        <link rel=\"stylesheet\" href=\"${stylesFile}\" type=\"text/css\">\r\n        ${helmet.meta.toString()}\r\n      </head>\r\n\r\n      <body>\r\n        <div id=\"root\">${content}</div>\r\n        <script>\r\n          window.INITIAL_DATA = ${serialize(context.data)}\r\n        </script>\r\n        <script src=\"${clientBundleFile}\"></script>\r\n      </body>\r\n    </html>\r\n  `;\r\n};\r\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","require","clientInstance","getClient","authParams","serverconfig","contentServer","process","contentVersion","channelToken","options","authorization","authorizationParams","createDeliveryClient","dateToMDY","date","Date","toLocaleDateString","year","month","day","logError","message","error","statusMessage","console","log","code","flattenArray","inArray","result","i","length","arrayElement","Array","isArray","push","addRendition","urls","rendition","formatstr","format","formats","filter","item","url","links","rel","href","width","metadata","name","toLowerCase","jpgSrcset","srcset","getSourceSet","asset","fields","renditions","forEach","native","height","getRenditionURLs","client","identifier","getItem","id","expand","then","catch","fetchHomePage","queryItems","q","data","logoID","items","company_logo","title","company_name","aboutUrl","about_url","contactUrl","contact_url","topics","promises","origTopic","topicId","topic","renditionUrls","thumbnail","fetchTopic","Promise","all","allTopics","companyTitle","getTopicsListPageData","companyThumbnailRenditionUrls","fetchTopicArticles","orderBy","article","image","allArticles","articles","fetchArticleDetails","articleId","author","published_date","content","article_content","imageCaption","image_caption","avatarID","avatar","authorRenditionUrls","fetchTopicProducts","product","productImage","allProducts","products","fetchProductDetails","productId","producer","description","productDetails","productColor","productStorage","producerRenditionUrls","fetchTopicVideos","allVideos","videos","Header","props","className","type","srcSet","sizes","src","alt","propTypes","PropTypes","isRequired","TopicsListItem","Link","to","pathname","search","style","textDecoration","TopicsListPage","staticContext","state","loading","this","document","fetchData","setState","Helmet","map","React","fetchInitialData","component","defaultProps","ArticlesListItem","topicName","formattedDate","value","small","Breadcrumb","linkParams","text","includeLinkParams","keys","constructor","Breadcrumbs","breadcrumbsData","breadcrumbData","BreadCrumb","ArticlesListPage","match","params","requestQueryParams","prevProps","req","path","split","pop","location","ArticleDetailsPage","cleancontent","filterXSS","stripIgnoreTag","stripIgnoreTagBody","large","indexOf","dangerouslySetInnerHTML","__html","ProductsListItem","releaseDate","ProductsListPage","ProductDetailsPage","VideosListItem","video","videoBrowseUrl","videoTitle","videoThumbnailUrl","videoDescription","VideosListPage","NotFoundPage","notFound","exact","server","express","use","res","getAuthorizationHeaderValue","authValue","method","charAt","oceUrl","headers","Authorization","writeProxyContent","proxyResponse","writeHead","statusCode","pipe","end","proxy","startsWith","https","http","handleContentRequest","activeRoute","Routes","find","route","matchPath","resolve","context","query","renderToString","StaticRouter","basename","renderRoutes","helmet","stylesFile","favIconFile","clientBundleFile","meta","toString","serialize","renderer","status","send","port","env","PORT","listen"],"sourceRoot":""}